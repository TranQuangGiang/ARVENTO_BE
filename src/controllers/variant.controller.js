// File: controllers/variant.controller.js
// import variantService from '../services/variant.service.js';
import variantService from '../services/variant.services.js';
import responseUtil from '../utils/response.util.js';
import Product from '../models/product.model.js';
import Variant from '../models/variant.model.js';

const generateVariants = async (req, res) => {
  try {
    const { options, overwrite } = req.body;
    const data = await variantService.generateVariants(
      req.params.productId,
      { options, overwrite }
    );
    return responseUtil.successResponse(res, data, 'Sinh bi·∫øn th·ªÉ th√†nh c√¥ng');
  } catch (err) {
    return responseUtil.errorResponse(res, null, err.message || 'ƒê√£ x·∫£y ra l·ªói');
  }
};



const updateVariant = async (req, res) => {
  try {
    const variantId = req.params.id;
    const productId = req.params.productId;
    const update = { ...req.body };
if ('size' in update || 'color' in update) {
      return responseUtil.errorResponse(
        res,
        null,
        'Kh√¥ng ƒë∆∞·ª£c ph√©p thay ƒë·ªïi size ho·∫∑c color c·ªßa bi·∫øn th·ªÉ'
      );
    }
    if (update.stock) update.stock = parseInt(update.stock);
    if (update.price) update.price = parseFloat(update.price);

    // Parse color n·∫øu l√† chu·ªói JSON
    if (update.color && typeof update.color === 'string') {
      try {
        update.color = JSON.parse(update.color);
      } catch (err) {
        return responseUtil.errorResponse(res, null, 'Color ph·∫£i l√† JSON h·ª£p l·ªá');
      }
    }

    // L·∫•y product ƒë·ªÉ ki·ªÉm tra sale_price & imageIndex
    const product = await Product.findById(productId).lean();
    if (!product) {
      return responseUtil.errorResponse(res, null, 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i');
    }
    //  Ki·ªÉm tra tr√πng size + color tr∆∞·ªõc khi c·∫≠p nh·∫≠t
    if (update.size || update.color) {
      const sizeToCheck = update.size;
      const colorNameToCheck = update.color?.name;

      if (sizeToCheck && colorNameToCheck) {
        const exists = await Variant.findOne({
          _id: { $ne: variantId },
          product_id: productId,
          size: sizeToCheck,
          'color.name': colorNameToCheck
        });

        if (exists) {
          return responseUtil.errorResponse(
            res,
            null,
            `Bi·∫øn th·ªÉ v·ªõi size "${sizeToCheck}" v√† m√†u "${colorNameToCheck}" ƒë√£ t·ªìn t·∫°i`
          );
        }
      }
    }


    // Ki·ªÉm tra gi√°: variant.price <= product.sale_price
    if (
      update.price !== undefined &&
      product.sale_price !== undefined &&
      Number(update.price) > Number(product.sale_price)
    ) {
      return responseUtil.errorResponse(
        res,
        null,
        'Gi√° bi·∫øn th·ªÉ kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n gi√° khuy·∫øn m√£i c·ªßa s·∫£n ph·∫©m'
      );
    }

    const imageIndex = parseInt(req.body.imageIndex);
    if (!isNaN(imageIndex)) {
      const variant = await Variant.findById(variantId).lean();
      if (!variant) {
        return responseUtil.errorResponse(res, null, 'Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ');
      }

      // N·∫øu imageIndex kh√°c th√¨ m·ªõi thay ·∫£nh
      const oldImageUrl = variant.image?.url;
      const newImageFromProduct = product?.images?.[imageIndex];

      if (!newImageFromProduct || !newImageFromProduct.url) {
        return responseUtil.errorResponse(res, null, '·∫¢nh s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i t·∫°i v·ªã tr√≠ ƒë√£ ch·ªçn');
      }

      if (oldImageUrl !== newImageFromProduct.url) {
        update.image = {
          url: newImageFromProduct.url,
          alt: newImageFromProduct.alt || `·∫¢nh ${imageIndex}`
        };
      }
    }
    if ((!req.body.sku || req.body.sku.trim() === '') && update.size && update.color?.name) {
      const cleanColor = update.color.name.replace(/[^a-zA-Z0-9]/g, '');
      update.sku = `VAR-${update.size}-${cleanColor}-${Date.now()}`;
    }


    const result = await variantService.updateVariant(productId, variantId, update);
    return responseUtil.successResponse(res, result, 'C·∫≠p nh·∫≠t bi·∫øn th·ªÉ th√†nh c√¥ng');
  } catch (err) {
    return responseUtil.errorResponse(res, null, err.message);
  }
};




const bulkUpdateVariants = async (req, res) => {
  try {
    const data = await variantService.bulkUpdateVariants(req.params.productId, req.body.updates);
    return responseUtil.successResponse(res, data, 'C·∫≠p nh·∫≠t h√†ng lo·∫°t th√†nh c√¥ng');
  } catch (err) {
    return responseUtil.errorResponse(res, null, err.message);
  }
};
const deleteVariant = async (req, res) => {
  try {
    const { productId, id } = req.params;

    // G·ªçi service ƒë·ªÉ x·ª≠ l√Ω logic xo√°
    await variantService.deleteVariant(productId, id);

    return responseUtil.successResponse(res, null, 'Xo√° bi·∫øn th·ªÉ th√†nh c√¥ng');
  } catch (err) {
    console.error('L·ªói khi xo√° bi·∫øn th·ªÉ:', err); // ü™µ Log gi√∫p debug
    return responseUtil.errorResponse(res, null, err.message || 'ƒê√£ x·∫£y ra l·ªói');
  }
};


const deleteAllVariants = async (req, res) => {
  try {
    await variantService.deleteAllVariants(req.params.productId);
    return responseUtil.successResponse(res, null, 'ƒê√£ xo√° to√†n b·ªô bi·∫øn th·ªÉ');
  } catch (err) {
    return responseUtil.errorResponse(res, null, err.message);
  }
};

const importVariants = async (req, res) => {
  try {
    const variantImages = req.variantImages || {}; // ‚úÖ t·ª´ middleware
    const data = await variantService.importVariants(req.params.productId, req.file?.path, variantImages);
    return responseUtil.successResponse(res, data, 'Import bi·∫øn th·ªÉ th√†nh c√¥ng');
  } catch (err) {
    return responseUtil.errorResponse(res, null, err.message);
  }
};

const exportVariants = async (req, res) => {
  try {
    const filePath = await variantService.exportVariants(req.params.productId);
    return res.download(filePath, err => {
      if (!err) variantService.cleanupExportedFile(filePath);
    });
  } catch (err) {
    return responseUtil.errorResponse(res, null, err.message);
  }
};

const getAdminVariants = async (req, res) => {
  try {
    const data = await variantService.getAdminVariants(req.params.productId, req.query);
    return responseUtil.successResponse(res, data);
  } catch (err) {
    return responseUtil.errorResponse(res, null, err.message);
  }
};

const getVariantById = async (req, res) => {
  try {
    const data = await variantService.getVariantById(req.params.productId, req.params.id);
    return responseUtil.successResponse(res, data, 'L·∫•y bi·∫øn th·ªÉ th√†nh c√¥ng');
  } catch (err) {
    return responseUtil.notFoundResponse(res, null, err.message);
  }
};
const getVariantOptions = async (req, res) => {
  try {
    const data = await variantService.getVariantOptions(req.params.productId);
    return responseUtil.successResponse(res, data, 'L·∫•y t√πy ch·ªçn th√†nh c√¥ng');
  } catch (err) {
    return responseUtil.errorResponse(res, null, err.message);
  }
};

const VariantController = {
  generateVariants,
  updateVariant,
  bulkUpdateVariants,
  deleteVariant,
  deleteAllVariants,
  importVariants,
  exportVariants,
  getAdminVariants,
  getVariantById,
  getVariantOptions
};

export default VariantController;
